<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.com.wanglinet.mapper.AccountRoleMapper" >
  <resultMap id="BaseResultMap" type="cn.com.wanglinet.entity.AccountRole" >
    <id column="accountrole_id" property="id" jdbcType="BIGINT" />
    <result column="accountrole_name" property="name" jdbcType="VARCHAR" />
    <result column="accountrole_description" property="description" jdbcType="VARCHAR" />
    <result column="accountrole_enable" property="enable" jdbcType="BIT" />
    <result column="accountrole_create_person_id" property="createPersonId" jdbcType="BIGINT" />
    <result column="accountrole_create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="accountrole_update_person_id" property="updatePersonId" jdbcType="BIGINT" />
    <result column="accountrole_update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    accountrole.id as accountrole_id, accountrole.name as accountrole_name, accountrole.description as accountrole_description, 
    accountrole.enable as accountrole_enable, accountrole.create_person_id as accountrole_create_person_id, 
    accountrole.create_time as accountrole_create_time, accountrole.update_person_id as accountrole_update_person_id, 
    accountrole.update_time as accountrole_update_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.com.wanglinet.entity.AccountRoleExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from account_role accountrole
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from account_role accountrole
    where accountrole.id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from account_role
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="cn.com.wanglinet.entity.AccountRoleExample" >
    delete from account_role accountrole
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.com.wanglinet.entity.AccountRole" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="BEFORE" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into account_role (id, name, description, 
      enable, create_person_id, create_time, 
      update_person_id, update_time)
    values (#{id,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, 
      #{enable,jdbcType=BIT}, #{createPersonId,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updatePersonId,jdbcType=BIGINT}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="cn.com.wanglinet.entity.AccountRole" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="BEFORE" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into account_role
    <trim prefix="(" suffix=")" suffixOverrides="," >
      id,
      <if test="name != null" >
        name,
      </if>
      <if test="description != null" >
        description,
      </if>
      <if test="enable != null" >
        enable,
      </if>
      <if test="createPersonId != null" >
        create_person_id,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updatePersonId != null" >
        update_person_id,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{id,jdbcType=BIGINT},
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="description != null" >
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="enable != null" >
        #{enable,jdbcType=BIT},
      </if>
      <if test="createPersonId != null" >
        #{createPersonId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatePersonId != null" >
        #{updatePersonId,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.com.wanglinet.entity.AccountRoleExample" resultType="java.lang.Integer" >
    select count(*) from account_role accountrole
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update account_role accountrole
    <set >
      <if test="record.id != null" >
        accountrole.id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.name != null" >
        accountrole.name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.description != null" >
        accountrole.description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.enable != null" >
        accountrole.enable = #{record.enable,jdbcType=BIT},
      </if>
      <if test="record.createPersonId != null" >
        accountrole.create_person_id = #{record.createPersonId,jdbcType=BIGINT},
      </if>
      <if test="record.createTime != null" >
        accountrole.create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatePersonId != null" >
        accountrole.update_person_id = #{record.updatePersonId,jdbcType=BIGINT},
      </if>
      <if test="record.updateTime != null" >
        accountrole.update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update account_role accountrole
    set accountrole.id = #{record.id,jdbcType=BIGINT},
      accountrole.name = #{record.name,jdbcType=VARCHAR},
      accountrole.description = #{record.description,jdbcType=VARCHAR},
      accountrole.enable = #{record.enable,jdbcType=BIT},
      accountrole.create_person_id = #{record.createPersonId,jdbcType=BIGINT},
      accountrole.create_time = #{record.createTime,jdbcType=TIMESTAMP},
      accountrole.update_person_id = #{record.updatePersonId,jdbcType=BIGINT},
      accountrole.update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.com.wanglinet.entity.AccountRole" >
    update account_role
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="description != null" >
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="enable != null" >
        enable = #{enable,jdbcType=BIT},
      </if>
      <if test="createPersonId != null" >
        create_person_id = #{createPersonId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatePersonId != null" >
        update_person_id = #{updatePersonId,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.com.wanglinet.entity.AccountRole" >
    update account_role
    set name = #{name,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      enable = #{enable,jdbcType=BIT},
      create_person_id = #{createPersonId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_person_id = #{updatePersonId,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>